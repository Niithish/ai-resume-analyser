<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/routes.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/routes.ts" />
              <option name="originalContent" value="import { type RouteConfig, index, route } from &quot;@react-router/dev/routes&quot;;&#10;&#10;export default [&#10;    index(&quot;routes/home.tsx&quot;),&#10;    route(&quot;/auth&quot;, &quot;routes/auth.tsx&quot;),&#10;    route(&quot;/upload&quot;, 'routes/upload.tsx'),&#10;    route(&quot;/resume/:id&quot;, 'routes/resume.tsx')&#10;] satisfies RouteConfig;" />
              <option name="updatedContent" value="import { type RouteConfig, index, route } from &quot;@react-router/dev/routes&quot;;&#10;&#10;export default [&#10;    index(&quot;routes/home.tsx&quot;),&#10;    route(&quot;/auth&quot;, &quot;routes/auth.tsx&quot;),&#10;    route(&quot;/upload&quot;, 'routes/upload.tsx'),&#10;    route(&quot;/resume/:id&quot;, 'routes/resume.tsx')&#10;] satisfies RouteConfig;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/routes/upload.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/routes/upload.tsx" />
              <option name="originalContent" value="import {type FormEvent, useState} from 'react'&#10;import Navbar from &quot;~/components/Navbar&quot;;&#10;import FileUploader from &quot;~/components/FileUploader&quot;;&#10;import {usePuterStore} from &quot;~/lib/puter&quot;;&#10;import {useNavigate} from &quot;react-router&quot;;&#10;import {convertPdfToImage} from &quot;~/lib/pdf2img&quot;;&#10;import {generateUUID} from &quot;~/lib/utils&quot;;&#10;import {prepareInstructions} from &quot;../../constants&quot;;&#10;&#10;const Upload = () =&gt; {&#10;    const {auth, isLoading, fs, ai, kv} = usePuterStore();&#10;    const navigate = useNavigate();&#10;    const [isProcessing, setIsProcessing] = useState(false );&#10;    const [statusText, setStatusText] = useState(&quot;&quot;);&#10;    const [file, setFile] = useState&lt;File | null&gt;(null);&#10;&#10;    const handleFileSelect = (file: File | null) =&gt; {&#10;        setFile(file);&#10;    }&#10;&#10;    const handleAnalyse = async (companyName: string, jobTitle: string, jobDescription: string, file: File) =&gt; {&#10;        setIsProcessing(true);&#10;        setStatusText(&quot;Uploading the file...&quot;);&#10;        const uploadedFile = await fs.upload([file]);&#10;        if (!uploadedFile) return setStatusText(&quot;Upload failed...&quot;);&#10;&#10;        setStatusText( &quot;Converting to images...&quot;);&#10;        const imageFile = await convertPdfToImage(file);&#10;        if(!imageFile.file) return setStatusText(&quot;Conversion failed...&quot;);&#10;&#10;        setStatusText(&quot;Uploading the image...&quot;);&#10;        const uploadedImage = await fs.upload([imageFile.file]);&#10;        if(!uploadedImage) return setStatusText(&quot;Image upload failed...&quot;);&#10;&#10;        setStatusText(&quot;Preparing data...&quot;);&#10;&#10;        const uuid = generateUUID();&#10;        const data = {&#10;            id: uuid,&#10;            resumePath: uploadedFile.path,&#10;            imagePath: uploadedImage.path,&#10;            companyName, jobTitle, jobDescription,&#10;            feedback : '',&#10;        }&#10;&#10;        await kv.set(`resume:${uuid}`, JSON.stringify(data));&#10;        setStatusText(&quot;Analysing...&quot;);&#10;&#10;        const feedback = await ai.feedback(&#10;            uploadedFile.path,&#10;            prepareInstructions({ jobTitle, jobDescription}))&#10;        if(!feedback) return setStatusText(&quot;Error: Failed to analyse resume...&quot;);&#10;&#10;        const feedbackText = typeof feedback.message.content === 'string' ?&#10;            feedback.message.content:&#10;            feedback.message.content[0].text&#10;        data.feedback = JSON.parse(feedbackText);&#10;        await kv.set(`resume:${uuid}`, JSON.stringify(data));&#10;        setStatusText(&quot;Analysis complete, redirecting...&quot;);&#10;        console.log(data);&#10;        navigate(`/resume/${uuid}`);&#10;        setIsProcessing(false);&#10;    }&#10;&#10;    const handleSubmit = (e: FormEvent&lt;HTMLFormElement&gt;) =&gt; {&#10;        e.preventDefault();&#10;        const form =e.currentTarget.closest('form');&#10;        if(!form) return;&#10;        const formData = new FormData(form);&#10;&#10;        const companyName = formData.get('company-name') as string;&#10;        const jobTitle = formData.get('job-title')as string;&#10;        const jobDescription = formData.get('job-description')as string;&#10;&#10;        if(!file) return;&#10;&#10;        handleAnalyse(companyName, jobTitle, jobDescription, file)&#10;    }&#10;    return (&#10;        &lt;&gt;&#10;            &lt;main className=&quot;bg-[url('/images/bg-main.svg')]&quot;&gt;&#10;                &lt;Navbar /&gt;&#10;                &lt;section className=&quot;main-section&quot;&gt;&#10;                    &lt;div className=&quot;page-heading&quot;&gt;&#10;                        &lt;h1&gt;Smart feedback for your dream job&lt;/h1&gt;&#10;                        {isProcessing ? (&#10;                            &lt;&gt;&#10;                            &lt;h2&gt;{statusText}&lt;/h2&gt;&#10;                                &lt;img src=&quot;/images/resume-scan.gif&quot;  alt=&quot;&quot; className=&quot;w-full&quot; /&gt;&#10;                            &lt;/&gt;&#10;                        ) : (&#10;                            &lt;h2&gt;Drop your resume for a ATS score and improvement tips&lt;/h2&gt;&#10;                        )}&#10;&#10;                        {!isProcessing &amp;&amp; (&#10;                        &lt;form id=&quot;upload-form&quot; onSubmit={handleSubmit} className=&quot;flex flex-col gap-4 mt-8&quot;&gt;&#10;                            &lt;div className=&quot;form-div&quot;&gt;&#10;                                &lt;label htmlFor=&quot;company-name&quot;&gt;Company Name&lt;/label&gt;&#10;                                &lt;input type=&quot;text&quot; name=&quot;company-name&quot; placeholder=&quot;Company Name&quot; id=&quot;company-name&quot;/&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;form-div&quot;&gt;&#10;                                &lt;label htmlFor=&quot;job-title&quot;&gt;Job Title&lt;/label&gt;&#10;                                &lt;input type=&quot;text&quot; name=&quot;job-title&quot; placeholder=&quot;Job Title&quot; id=&quot;job-title&quot;/&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;form-div&quot;&gt;&#10;                                &lt;label htmlFor=&quot;job-description&quot;&gt;Job description&lt;/label&gt;&#10;                                &lt;input type=&quot;text&quot; name=&quot;job-description&quot; placeholder=&quot;Job Description&quot; id=&quot;job-description&quot;/&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;form-div&quot;&gt;&#10;                                &lt;label htmlFor=&quot;uploader&quot;&gt;Upload resume&lt;/label&gt;&#10;                                &lt;FileUploader onFileSelect={handleFileSelect} /&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;button className=&quot;primary-button&quot; type=&quot;submit&quot;&gt;Analyse Submit&lt;/button&gt;&#10;                        &lt;/form&gt;&#10;                        )}&#10;                    &lt;/div&gt;&#10;                &lt;/section&gt; &lt;/main&gt;&#10;        &lt;/&gt;&#10;    )&#10;}&#10;export default Upload&#10;" />
              <option name="updatedContent" value="import {type FormEvent, useState} from 'react'&#13;&#10;import Navbar from &quot;~/components/Navbar&quot;;&#13;&#10;import FileUploader from &quot;~/components/FileUploader&quot;;&#13;&#10;import {usePuterStore} from &quot;~/lib/puter&quot;;&#13;&#10;import {useNavigate} from &quot;react-router&quot;;&#13;&#10;import {convertPdfToImage} from &quot;~/lib/pdf2img&quot;;&#13;&#10;import {generateUUID} from &quot;~/lib/utils&quot;;&#13;&#10;import {prepareInstructions} from &quot;../../constants&quot;;&#13;&#10;&#13;&#10;const Upload = () =&gt; {&#13;&#10;    const {auth, isLoading, fs, ai, kv} = usePuterStore();&#13;&#10;    const navigate = useNavigate();&#13;&#10;    const [isProcessing, setIsProcessing] = useState(false );&#13;&#10;    const [statusText, setStatusText] = useState(&quot;&quot;);&#13;&#10;    const [file, setFile] = useState&lt;File | null&gt;(null);&#13;&#10;&#13;&#10;    const handleFileSelect = (file: File | null) =&gt; {&#13;&#10;        setFile(file);&#13;&#10;    }&#13;&#10;&#13;&#10;    const handleAnalyse = async (companyName: string, jobTitle: string, jobDescription: string, file: File) =&gt; {&#13;&#10;        setIsProcessing(true);&#13;&#10;        setStatusText(&quot;Uploading the file...&quot;);&#13;&#10;        const uploadedFile = await fs.upload([file]);&#13;&#10;        if (!uploadedFile) return setStatusText(&quot;Upload failed...&quot;);&#13;&#10;&#13;&#10;        setStatusText( &quot;Converting to images...&quot;);&#13;&#10;        const imageFile = await convertPdfToImage(file);&#13;&#10;        if(!imageFile.file) return setStatusText(&quot;Conversion failed...&quot;);&#13;&#10;&#13;&#10;        setStatusText(&quot;Uploading the image...&quot;);&#13;&#10;        const uploadedImage = await fs.upload([imageFile.file]);&#13;&#10;        if(!uploadedImage) return setStatusText(&quot;Image upload failed...&quot;);&#13;&#10;&#13;&#10;        setStatusText(&quot;Preparing data...&quot;);&#13;&#10;&#13;&#10;        const uuid = generateUUID();&#13;&#10;        const data = {&#13;&#10;            id: uuid,&#13;&#10;            resumePath: uploadedFile.path,&#13;&#10;            imagePath: uploadedImage.path,&#13;&#10;            companyName, jobTitle, jobDescription,&#13;&#10;            feedback : '',&#13;&#10;        }&#13;&#10;&#13;&#10;        await kv.set(`resume:${uuid}`, JSON.stringify(data));&#13;&#10;        setStatusText(&quot;Analysing...&quot;);&#13;&#10;&#13;&#10;        const feedback = await ai.feedback(&#13;&#10;            uploadedFile.path,&#13;&#10;            prepareInstructions({ jobTitle, jobDescription}))&#13;&#10;        if(!feedback) return setStatusText(&quot;Error: Failed to analyse resume...&quot;);&#13;&#10;&#13;&#10;        const feedbackText = typeof feedback.message.content === 'string' ?&#13;&#10;            feedback.message.content:&#13;&#10;            feedback.message.content[0].text&#13;&#10;        data.feedback = JSON.parse(feedbackText);&#13;&#10;        await kv.set(`resume:${uuid}`, JSON.stringify(data));&#13;&#10;        setStatusText(&quot;Analysis complete, redirecting...&quot;);&#13;&#10;        console.log(data);&#13;&#10;        navigate(`/resume/${uuid}`);&#13;&#10;        setIsProcessing(false);&#13;&#10;    }&#13;&#10;&#13;&#10;    const handleSubmit = (e: FormEvent&lt;HTMLFormElement&gt;) =&gt; {&#13;&#10;        e.preventDefault();&#13;&#10;        const form =e.currentTarget.closest('form');&#13;&#10;        if(!form) return;&#13;&#10;        const formData = new FormData(form);&#13;&#10;&#13;&#10;        const companyName = formData.get('company-name') as string;&#13;&#10;        const jobTitle = formData.get('job-title')as string;&#13;&#10;        const jobDescription = formData.get('job-description')as string;&#13;&#10;&#13;&#10;        if(!file) return;&#13;&#10;&#13;&#10;        handleAnalyse(companyName, jobTitle, jobDescription, file)&#13;&#10;    }&#13;&#10;    return (&#13;&#10;        &lt;&gt;&#13;&#10;            &lt;main className=&quot;bg-[url('/images/bg-main.svg')]&quot;&gt;&#13;&#10;                &lt;Navbar /&gt;&#13;&#10;                &lt;section className=&quot;main-section&quot;&gt;&#13;&#10;                    &lt;div className=&quot;page-heading&quot;&gt;&#13;&#10;                        &lt;h1&gt;Smart feedback for your dream job&lt;/h1&gt;&#13;&#10;                        {isProcessing ? (&#13;&#10;                            &lt;&gt;&#13;&#10;                            &lt;h2&gt;{statusText}&lt;/h2&gt;&#13;&#10;                                &lt;img src=&quot;/images/resume-scan.gif&quot;  alt=&quot;&quot; className=&quot;w-full&quot; /&gt;&#13;&#10;                            &lt;/&gt;&#13;&#10;                        ) : (&#13;&#10;                            &lt;h2&gt;Drop your resume for a ATS score and improvement tips&lt;/h2&gt;&#13;&#10;                        )}&#13;&#10;&#13;&#10;                        {!isProcessing &amp;&amp; (&#13;&#10;                        &lt;form id=&quot;upload-form&quot; onSubmit={handleSubmit} className=&quot;flex flex-col gap-4 mt-8&quot;&gt;&#13;&#10;                            &lt;div className=&quot;form-div&quot;&gt;&#13;&#10;                                &lt;label htmlFor=&quot;company-name&quot;&gt;Company Name&lt;/label&gt;&#13;&#10;                                &lt;input type=&quot;text&quot; name=&quot;company-name&quot; placeholder=&quot;Company Name&quot; id=&quot;company-name&quot;/&gt;&#13;&#10;                            &lt;/div&gt;&#13;&#10;                            &lt;div className=&quot;form-div&quot;&gt;&#13;&#10;                                &lt;label htmlFor=&quot;job-title&quot;&gt;Job Title&lt;/label&gt;&#13;&#10;                                &lt;input type=&quot;text&quot; name=&quot;job-title&quot; placeholder=&quot;Job Title&quot; id=&quot;job-title&quot;/&gt;&#13;&#10;                            &lt;/div&gt;&#13;&#10;                            &lt;div className=&quot;form-div&quot;&gt;&#13;&#10;                                &lt;label htmlFor=&quot;job-description&quot;&gt;Job description&lt;/label&gt;&#13;&#10;                                &lt;input type=&quot;text&quot; name=&quot;job-description&quot; placeholder=&quot;Job Description&quot; id=&quot;job-description&quot;/&gt;&#13;&#10;                            &lt;/div&gt;&#13;&#10;                            &lt;div className=&quot;form-div&quot;&gt;&#13;&#10;                                &lt;label htmlFor=&quot;uploader&quot;&gt;Upload resume&lt;/label&gt;&#13;&#10;                                &lt;FileUploader onFileSelect={handleFileSelect} /&gt;&#13;&#10;                            &lt;/div&gt;&#13;&#10;                            &lt;button className=&quot;primary-button&quot; type=&quot;submit&quot;&gt;Analyse Submit&lt;/button&gt;&#13;&#10;                        &lt;/form&gt;&#13;&#10;                        )}&#13;&#10;                    &lt;/div&gt;&#13;&#10;                &lt;/section&gt; &lt;/main&gt;&#13;&#10;        &lt;/&gt;&#13;&#10;    )&#13;&#10;}&#13;&#10;export default Upload" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>